apply plugin: 'idea'

version = '1.1.0'
def jarVersion = version

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.5.0'
    }
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }

    apply plugin: 'jacoco'
    apply plugin: 'com.github.kt3k.coveralls'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    group = 'org.cf'
    sourceCompatibility = 1.8
    version = parent.version

    jar {
        version = jarVersion
    }

    ext {
        depends = [
            commons_lang: 'org.apache.commons:commons-lang3:3.4',
            findbugs: 'com.google.code.findbugs:jsr305:3.0.1',
            guava: 'com.google.guava:guava:19.0',
            junit: 'junit:junit:4.12',
            mockito: 'org.mockito:mockito-core:1.10.19',
            perfidix: 'org.perfidix:perfidix:3.6.9',
            proguard_gradle: 'net.sf.proguard:proguard-gradle:5.2.1',
            slf4j_api: 'org.slf4j:slf4j-api:1.7.21',
            slf4j_nop: 'org.slf4j:slf4j-nop:1.7.21',
            trove4j: 'net.sf.trove4j:trove4j:3.0.3',
         ]
    }

    tasks.withType(JavaCompile) {
        options.fork = true
        //options.incremental = true
    }

    /*
     * Running tests takes up a lot of memory and TravisCI only has 3-4 gb available.
     * Use a low value of forkEvery to ensure heap is started fresh every few classes.
     * Limit max heap size to simulate TravisCI environment.
     * Relevant TravisCI building issues:
     *  - https://discuss.gradle.org/t/travis-ci-org-gradle-launcher-daemon-client-daemondisappearedexception-gradle-build-daemon-disappeared-unexpectedly-it-may-have-been-killed-or-may-have-crashed/13106/3
     *  - https://github.com/urho3d/Urho3D/issues/651
    */
    tasks.withType(Test) {
        // maxParallelForks = Runtime.runtime.availableProcessors()
        maxParallelForks = 2
        minHeapSize = '256m'
        maxHeapSize = '1500m'
        forkEvery = 10
    }

    // This is just to show off API usage. No tests needed.
    if (!project.name.equals("demoapp")) {
        jacocoTestReport {
            reports {
                html.enabled = true
                xml.enabled = true
                csv.enabled = false
            }
        }
    }
}

coveralls {
    ext.targetProjects = subprojects - project(':demoapp')
    sourceDirs = files(ext.targetProjects.sourceSets.main.allJava.srcDirs).files.absolutePath
}

task jacocoTestReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    ext.targetProjects = subprojects - project(':demoapp')

    dependsOn = ext.targetProjects.test
    sourceDirectories = files(ext.targetProjects.sourceSets.main.allJava.srcDirs)
    classDirectories = files(ext.targetProjects.sourceSets.main.output.classesDir)
    executionData = files(ext.targetProjects.jacocoTestReport.executionData)

    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }

    onlyIf = {
        true
    }

    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}

if (System.env.TRAVIS == 'true') {
    allprojects {
        tasks.withType(Test) {
            testLogging {
                // Printing out status of each test makes following and debugging builds easier.
                events "started", "passed", "skipped", "failed"
            }
        }
    }
}
