buildscript {
    dependencies {
        classpath depends.proguard_gradle
    }
    repositories {
        mavenCentral()
    }
}

dependencies {
    // Object cloning
    compile 'uk.com.robust-it:cloning:1.9.2'

    // Easy method reflection
    compile 'commons-beanutils:commons-beanutils:1.9.2'

    // Lazy
    compile depends.commons_lang
    compile depends.guava

    // Primitive collections
    compile depends.trove4j

    // Logging facade
    compile depends.slf4j_api

    // Parsing and writing dex files
    compile 'org.smali:dexlib2:2.1.3'
    compile 'org.smali:smali:2.1.3'
    compile 'org.smali:baksmali:2.1.3'

    // For dynamic java.lang.Class generation
    compile 'org.ow2.asm:asm:5.1'

    // Contains Android framework classes that should be reflected instead of virtually executed
    // Mostly, Base64, but could be anything that's slow on the vm
    compile files('libs/android-local.jar')

    // Testing
    testCompile depends.junit
    testCompile depends.mockito
    testCompile depends.perfidix // benchmarks
}

// Build a separate jar that contains all dependencies
task fatJar(type: Jar) {
    from sourceSets.main.output
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}
tasks.getByPath('build').dependsOn(fatJar)

task myTestsJar(type: Jar) {
    // Simplify uses some classes from smalivm's tests.
    classifier = 'tests'
    from sourceSets.test.output
}

configurations {
  testArtifacts
}

artifacts {
   testArtifacts myTestsJar
}

task proguard(type: proguard.gradle.ProGuardTask, dependsOn: fatJar) {
    def outFile = fatJar.destinationDir.getPath() + '/' + fatJar.baseName + '-' + fatJar.version + '-proguard' + '.' + fatJar.extension

    injars fatJar.archivePath
    outjars outFile

    libraryjars "${System.properties['java.home']}/lib/rt.jar"

    dontobfuscate
    //dontoptimize
    optimizations '!code/allocation/variable'

    keepclassmembers 'enum * { public static **[] values(); public static ** valueOf(java.lang.String); }'
    keepattributes '*'

    keep 'public class * { public protected *; }'

    dontwarn
    verbose
}
